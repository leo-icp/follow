{"version":3,"sources":["components/ConnectButton.tsx","App.tsx","index.tsx"],"names":["ConnectButton","setAccount","isMetaMaskInstalled","ethereum","window","Boolean","isMetaMask","useEffect","handleOnClick","a","request","method","accounts","message","error","className","onClick","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","account","addressList","setAddressList","style","width","name","onFinish","values","list","map","val","address","autoComplete","marginTop","List","fields","add","remove","key","restField","display","align","Item","rules","required","placeholder","MinusCircleOutlined","type","block","icon","PlusOutlined","htmlType","header","dataSource","renderItem","index","actions","provider","namespace","toAddr","env","Env","PRODUCTION","chain","Blockchain","ETH","onSuccess","e","console","log","onFailure","rootElement","document","getElementById","ReactDOMClient","render"],"mappings":"+PAsCeA,MAnCf,YAAwC,IAAfC,EAAc,EAAdA,WAEjBC,EAAsB,WAC1B,IAAQC,EAAaC,OAAbD,SACR,OAAOE,QAAQF,GAAYA,EAASG,aAGtCC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAa,uCAAG,4BAAAC,EAAA,0DAChBP,IADgB,0CAIOE,OAAOD,SAASO,QAAQ,CAC7CC,OAAQ,wBALM,OAIVC,EAJU,OAQhBX,EAAWW,EAAS,IARJ,gDAUhBC,IAAQC,MAAM,KAAMD,SAVJ,gCAalBA,IAAQC,MAAM,4BAbI,yDAAH,qDAiBnB,OACE,cAAC,IAAD,CAAQC,UAAU,gBAAgBC,QAASR,EAA3C,6B,wGCHQS,YAXW,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAOF,SAASC,IACtB,MAA8BC,mBAAiB,IAA/C,mBAAOC,EAAP,KAAgB1B,EAAhB,KACA,EAAsCyB,mBAAmB,IAAzD,mBAAOE,EAAP,KAAoBC,EAApB,KAKA,OACE,sBAAKd,UAAU,YAAf,UACGY,EACC,cAAC,IAAD,CACEG,MAAO,CACLC,MAAO,QAFX,SAKGJ,IAGH,qCACE,4DACA,cAAC,EAAD,CAAe1B,WAAYA,OAG/B,eAAC,IAAD,CACE+B,KAAK,yBACLC,SAtBW,SAACC,GAChBL,EAAeK,EAAOC,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,aAsBxCC,aAAa,MACbT,MAAO,CACLU,UAAW,GACXT,MAAO,KANX,UASE,cAAC,IAAKU,KAAN,CAAWT,KAAK,OAAhB,SACG,SAACU,EAAD,OAAWC,EAAX,EAAWA,IAAKC,EAAhB,EAAgBA,OAAhB,OACC,qCACGF,EAAON,KAAI,gBAAGS,EAAH,EAAGA,IAAKb,EAAR,EAAQA,KAASc,EAAjB,wBACV,eAAC,IAAD,CAAiBhB,MAAO,CAAEiB,QAAS,QAAUC,MAAM,WAAnD,UACE,cAAC,IAAKC,KAAN,yBACEnB,MAAO,CACLC,MAAO,MAELe,GAJN,IAKEd,KAAM,CAACA,EAAM,WACbkB,MAAO,CAAC,CAAEC,UAAU,EAAMtC,QAAS,oBANrC,SAQE,cAAC,IAAD,CAAOuC,YAAY,sBAErB,cAACC,EAAA,EAAD,CAAqBrC,QAAS,kBAAM4B,EAAOZ,QAXjCa,MAcd,cAAC,IAAKI,KAAN,UACE,cAAC,IAAD,CACEK,KAAK,SACLtC,QAAS,kBAAM2B,KACfY,OAAK,EACLC,KAAM,cAACC,EAAA,EAAD,IAJR,wCAYR,cAAC,IAAKR,KAAN,UACE,cAAC,IAAD,CAAQK,KAAK,UAAUI,SAAS,SAAhC,yBAKJ,cAAC,IAAD,CACE5B,MAAO,CACLC,MAAO,KAET4B,OAAO,cACPC,WAAYhC,EACZiC,WAAY,SAACvB,EAASwB,GAAV,OACV,cAAC,IAAKb,KAAN,CAEEc,QAAS,CACP,cAAC,eAAD,CACEC,SAAU5D,OAAOD,SACjB8D,UAAU,eACVC,OAAQ5B,EACR6B,IAAKC,MAAIC,WACTC,MAAOC,aAAWC,IAClBC,UAAW,SAACC,GACVC,QAAQC,IAAIF,IAEdG,UAAW,SAACH,GACVC,QAAQC,IAAIF,OAbpB,SAkBGpC,GAjBIwB,SCxGjB,IAAMgB,EAAcC,SAASC,eAAe,QAC/BC,aAA0BH,GAElCI,OACH,cAAC,aAAD,UACE,cAACzD,EAAD,Q","file":"static/js/main.e725279c.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nimport { Button, message } from \"antd\";\r\n\r\nfunction ConnectButton({ setAccount }) {\r\n  // Check function if MetaMask is installed\r\n  const isMetaMaskInstalled = () => {\r\n    const { ethereum } = window;\r\n    return Boolean(ethereum && ethereum.isMetaMask);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleOnClick();\r\n  }, []);\r\n\r\n  const handleOnClick = async () => {\r\n    if (isMetaMaskInstalled()) {\r\n      // Request to connect to MetaMask\r\n      try {\r\n        const accounts = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        // Update the state for account\r\n        setAccount(accounts[0]);\r\n      } catch (error) {\r\n        message.error(error.message);\r\n      }\r\n    } else {\r\n      message.error(\"Please install MetaMask.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button className=\"connectButton\" onClick={handleOnClick}>\r\n      Connect wallet\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default ConnectButton;\r\n","import { useState } from \"react\";\nimport \"./styles.css\";\nimport ConnectButton from \"./components/ConnectButton\";\nimport {\n  FollowButton,\n  Env,\n  Blockchain,\n} from \"@cyberconnect/react-follow-button\";\nimport { Form, Input, Button, Space, List } from \"antd\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/antd.min.css\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB7U2BxIp7VdA0nLrsuxxfUF6ybNTvTxO8\",\n  authDomain: \"wechat-follow.firebaseapp.com\",\n  projectId: \"wechat-follow\",\n  storageBucket: \"wechat-follow.appspot.com\",\n  messagingSenderId: \"1006898251801\",\n  appId: \"1:1006898251801:web:c20393888d3d40a8588288\",\n  measurementId: \"G-QCZGJCSHVG\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n// const analytics = getAnalytics(app);\n\nexport default function App() {\n  const [account, setAccount] = useState<string>(\"\");\n  const [addressList, setAddressList] = useState<string[]>([]);\n  const onFinish = (values: { list: { address: string }[] }) => {\n    setAddressList(values.list.map((val) => val.address));\n  };\n\n  return (\n    <div className=\"container\">\n      {account ? (\n        <Button\n          style={{\n            width: \"auto\",\n          }}\n        >\n          {account}\n        </Button>\n      ) : (\n        <>\n          <h1>Connect with Follow Button</h1>\n          <ConnectButton setAccount={setAccount}></ConnectButton>\n        </>\n      )}\n      <Form\n        name=\"dynamic_form_nest_item\"\n        onFinish={onFinish}\n        autoComplete=\"off\"\n        style={{\n          marginTop: 10,\n          width: 800,\n        }}\n      >\n        <Form.List name=\"list\">\n          {(fields, { add, remove }) => (\n            <>\n              {fields.map(({ key, name, ...restField }) => (\n                <Space key={key} style={{ display: \"flex\" }} align=\"baseline\">\n                  <Form.Item\n                    style={{\n                      width: 800,\n                    }}\n                    {...restField}\n                    name={[name, \"address\"]}\n                    rules={[{ required: true, message: \"Missing address\" }]}\n                  >\n                    <Input placeholder=\"wallet address\" />\n                  </Form.Item>\n                  <MinusCircleOutlined onClick={() => remove(name)} />\n                </Space>\n              ))}\n              <Form.Item>\n                <Button\n                  type=\"dashed\"\n                  onClick={() => add()}\n                  block\n                  icon={<PlusOutlined />}\n                >\n                  Add Wallet Address\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n      <List\n        style={{\n          width: 800,\n        }}\n        header=\"follow list\"\n        dataSource={addressList}\n        renderItem={(address, index) => (\n          <List.Item\n            key={index}\n            actions={[\n              <FollowButton\n                provider={window.ethereum}\n                namespace=\"CyberConnect\"\n                toAddr={address}\n                env={Env.PRODUCTION}\n                chain={Blockchain.ETH}\n                onSuccess={(e) => {\n                  console.log(e);\n                }}\n                onFailure={(e) => {\n                  console.log(e);\n                }}\n              />,\n            ]}\n          >\n            {address}\n          </List.Item>\n        )}\n      ></List>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport * as ReactDOMClient from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}