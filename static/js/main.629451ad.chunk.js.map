{"version":3,"sources":["components/ConnectButton.tsx","App.tsx","index.tsx"],"names":["ConnectButton","setAccount","isMetaMaskInstalled","ethereum","window","Boolean","isMetaMask","useEffect","handleOnClick","a","request","method","accounts","message","error","className","onClick","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","databaseURL","App","db","getDatabase","useState","account","addressList","setAddressList","currentPage","setCurrentPage","pageSize","setPageSize","qs","query","ref","orderByKey","onValue","snapshot","data","val","formatedData","Object","keys","style","width","name","onFinish","values","list","map","address","i","set","autoComplete","marginTop","List","fields","add","remove","key","restField","display","align","Item","rules","required","placeholder","MinusCircleOutlined","type","block","icon","PlusOutlined","htmlType","header","dataSource","pagination","current","onChange","page","renderItem","index","actions","provider","namespace","toAddr","env","Env","PRODUCTION","chain","Blockchain","ETH","onSuccess","e","success","code","onFailure","rootElement","document","getElementById","ReactDOMClient","render"],"mappings":"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","file":"static/js/main.629451ad.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nimport { Button, message } from \"antd\";\r\n\r\nfunction ConnectButton({ setAccount }) {\r\n  // Check function if MetaMask is installed\r\n  const isMetaMaskInstalled = () => {\r\n    const { ethereum } = window;\r\n    return Boolean(ethereum && ethereum.isMetaMask);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleOnClick();\r\n  }, []);\r\n\r\n  const handleOnClick = async () => {\r\n    if (isMetaMaskInstalled()) {\r\n      // Request to connect to MetaMask\r\n      try {\r\n        const accounts = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        // Update the state for account\r\n        setAccount(accounts[0]);\r\n      } catch (error) {\r\n        message.error(error.message);\r\n      }\r\n    } else {\r\n      message.error(\"Please install MetaMask.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button className=\"connectButton\" onClick={handleOnClick}>\r\n      Connect wallet\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default ConnectButton;\r\n","import { useEffect, useState } from \"react\";\nimport \"./styles.css\";\nimport ConnectButton from \"./components/ConnectButton\";\nimport {\n  FollowButton,\n  Env,\n  Blockchain,\n} from \"@cyberconnect/react-follow-button\";\nimport { Form, Input, Button, Space, List, message } from \"antd\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { initializeApp } from \"firebase/app\";\nimport {\n  getDatabase,\n  ref,\n  set,\n  onValue,\n  query,\n  startAt,\n  limitToFirst,\n  limitToLast,\n  endAt,\n  orderByKey,\n} from \"firebase/database\";\n\nimport \"antd/dist/antd.min.css\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB7U2BxIp7VdA0nLrsuxxfUF6ybNTvTxO8\",\n  authDomain: \"wechat-follow.firebaseapp.com\",\n  projectId: \"wechat-follow\",\n  storageBucket: \"wechat-follow.appspot.com\",\n  messagingSenderId: \"1006898251801\",\n  appId: \"1:1006898251801:web:c20393888d3d40a8588288\",\n  measurementId: \"G-QCZGJCSHVG\",\n  databaseURL: \"https://wechat-follow-default-rtdb.firebaseio.com/\",\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport default function App() {\n  const db = getDatabase();\n  const [account, setAccount] = useState<string>(\"\");\n  const [addressList, setAddressList] = useState<string[]>([]);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [pageSize, setPageSize] = useState<number>(20);\n  const onFinish = (values: { list: { address: string }[] }) => {\n    const list = values.list.map((val) => val.address);\n    setAddressList(list);\n\n    for (let i of list) {\n      set(ref(db, \"address_list/\" + i), i);\n    }\n  };\n\n  useEffect(() => {\n    const qs = query(\n      ref(db, \"address_list/\"),\n      orderByKey()\n      // limitToFirst((currentPage - 1) * pageSize + 1),\n      // limitToLast(currentPage * pageSize)\n    );\n\n    // onValue(ref(db, \"address_list/\"), (snapshot) => {\n    //   const data = snapshot.val();\n    //   const formatedData = Object.keys(data);\n    //   setAddressList(formatedData);\n    // });\n\n    onValue(qs, (snapshot) => {\n      const data = snapshot.val();\n      const formatedData = Object.keys(data);\n      setAddressList(formatedData);\n    });\n  }, [pageSize, currentPage]);\n\n  const handlePageChange = (page: number, pageSize: number) => {\n    setCurrentPage(page);\n    setPageSize(pageSize);\n  };\n\n  return (\n    <div className=\"container\">\n      {account ? (\n        <Button\n          style={{\n            width: \"auto\",\n          }}\n        >\n          {account}\n        </Button>\n      ) : (\n        <>\n          <h1>Connect with Follow Button</h1>\n          <ConnectButton setAccount={setAccount}></ConnectButton>\n        </>\n      )}\n      <Form\n        name=\"dynamic_form_nest_item\"\n        onFinish={onFinish}\n        autoComplete=\"off\"\n        style={{\n          marginTop: 10,\n          width: 800,\n        }}\n      >\n        <Form.List name=\"list\">\n          {(fields, { add, remove }) => (\n            <>\n              {fields.map(({ key, name, ...restField }) => (\n                <Space key={key} style={{ display: \"flex\" }} align=\"baseline\">\n                  <Form.Item\n                    style={{\n                      width: 800,\n                    }}\n                    {...restField}\n                    name={[name, \"address\"]}\n                    rules={[{ required: true, message: \"Missing address\" }]}\n                  >\n                    <Input placeholder=\"wallet address\" />\n                  </Form.Item>\n                  <MinusCircleOutlined onClick={() => remove(name)} />\n                </Space>\n              ))}\n              <Form.Item>\n                <Button\n                  type=\"dashed\"\n                  onClick={() => add()}\n                  block\n                  icon={<PlusOutlined />}\n                >\n                  Add Wallet Address\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n      <List\n        style={{\n          width: 800,\n        }}\n        header=\"follow list\"\n        dataSource={addressList}\n        pagination={{\n          pageSize: pageSize,\n          current: currentPage,\n          onChange: handlePageChange,\n        }}\n        renderItem={(address, index) => (\n          <List.Item\n            key={address}\n            actions={[\n              <FollowButton\n                key={address}\n                provider={window.ethereum}\n                namespace=\"CyberConnect\"\n                toAddr={address}\n                env={Env.PRODUCTION}\n                chain={Blockchain.ETH}\n                onSuccess={(e) => {\n                  message.success(e.code);\n                }}\n                onFailure={(e) => {\n                  message.error(e.code + \"  \" + e.message);\n                }}\n              />,\n            ]}\n          >\n            {address}\n          </List.Item>\n        )}\n      />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport * as ReactDOMClient from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}